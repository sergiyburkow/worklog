// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  ENGINEER
  QA
  GUEST
}

model User {
  id           String          @id @default(uuid())
  name         String
  email        String         @unique
  phone        String?
  passwordHash String         @map("password_hash")
  role         UserRole       @default(ENGINEER)
  tokens       UserToken[]
  projects     ProjectUser[]
  taskLogs     ProductTaskLog[]
  verifiedLogs ProductTaskLog[] @relation("VerifiedBy")
  skills       UserSkill[]
  statusHistory TaskLogStatusHistory[]
  productTasks  ProductTask[]

  @@map("Users")
}

model UserToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  jwtToken  String    @map("jwt_token")
  expiresAt DateTime  @map("expires_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserTokens")
}

model Client {
  id          String           @id @default(uuid())
  name        String
  description String?
  address     String?
  contactInfo String?         @map("contact_info")
  contacts    ClientContact[]
  projects    Project[]

  @@map("Clients")
}

model ClientContact {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  name      String
  email     String?
  phone     String?
  telegram  String?
  whatsapp  String?
  signal    String?
  messenger String?
  instagram String?
  facebook  String?
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("ClientContacts")
}

model ProjectStatus {
  id       String     @id @default(uuid())
  name     String     @unique
  projects Project[]

  @@map("ProjectStatuses")
}

model Project {
  id            String         @id @default(uuid())
  name          String
  clientId      String        @map("client_id")
  startDate     DateTime      @map("start_date")
  deadline      DateTime
  actualEndDate DateTime?     @map("actual_end_date")
  statusId      String        @map("status_id")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  status        ProjectStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  users         ProjectUser[]
  productTasks  ProductTask[]
  projectTasks  ProjectTask[]
  products      Product[]

  @@map("Projects")
}

model ProjectUser {
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("ProjectUsers")
}

model TaskType {
  id            String          @id @default(uuid())
  name          String         @unique
  productTasks  ProductTask[]
  projectTasks  ProjectTask[]

  @@map("TaskTypes")
}

model ProductTask {
  id             String            @id @default(uuid())
  projectId      String           @map("project_id")
  userId         String           @map("user_id")
  name           String
  typeId         String           @map("type_id")
  tags           String?
  complexity     Int?
  estimatedTime  Int?             @map("estimated_time")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type           TaskType         @relation(fields: [typeId], references: [id], onDelete: Cascade)
  logs           ProductTaskLog[]

  @@map("ProductTasks")
}

model ProjectTask {
  id           String    @id @default(uuid())
  projectId    String    @map("project_id")
  name         String
  typeId       String    @map("type_id")
  tags         String?
  complexity   Int?
  trackedTime  Int?      @map("tracked_time")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type         TaskType  @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@map("ProjectTasks")
}

model Product {
  id        String           @id @default(uuid())
  projectId String          @map("project_id")
  createdAt DateTime        @default(now()) @map("created_at")
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskLogs  ProductTaskLog[]

  @@map("Products")
}

model ProductTaskLog {
  id              String                  @id @default(uuid())
  userId          String                 @map("user_id")
  taskId          String                 @map("task_id")
  productId       String                 @map("product_id")
  completedAt     DateTime               @default(now()) @map("completed_at")
  timeSpent       Int                    @map("time_spent")
  verifiedByUserId String?               @map("verified_by_user_id")
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy      User?                  @relation("VerifiedBy", fields: [verifiedByUserId], references: [id])
  task            ProductTask            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  product         Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  statusHistory   TaskLogStatusHistory[]

  @@map("ProductTaskLogs")
}

model TaskLogStatus {
  id            String                  @id @default(uuid())
  name          String                 @unique
  statusHistory TaskLogStatusHistory[]

  @@map("TaskLogStatuses")
}

model TaskLogStatusHistory {
  id         String          @id @default(uuid())
  taskLogId  String         @map("task_log_id")
  statusId   String         @map("status_id")
  userId     String         @map("user_id")
  createdAt  DateTime       @default(now()) @map("created_at")
  taskLog    ProductTaskLog @relation(fields: [taskLogId], references: [id], onDelete: Cascade)
  status     TaskLogStatus  @relation(fields: [statusId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("TaskLogStatusHistory")
}

model Skill {
  id    String       @id @default(uuid())
  name  String       @unique
  users UserSkill[]

  @@map("Skills")
}

model UserSkill {
  userId   String  @map("user_id")
  skillId  String  @map("skill_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill    Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("UserSkills")
}
